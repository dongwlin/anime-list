// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dongwlin/anime-list/internal/ent/anime"
	"github.com/dongwlin/anime-list/internal/ent/predicate"
	"github.com/dongwlin/anime-list/internal/ent/theater"
)

// TheaterUpdate is the builder for updating Theater entities.
type TheaterUpdate struct {
	config
	hooks    []Hook
	mutation *TheaterMutation
}

// Where appends a list predicates to the TheaterUpdate builder.
func (tu *TheaterUpdate) Where(ps ...predicate.Theater) *TheaterUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TheaterUpdate) SetName(s string) *TheaterUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TheaterUpdate) SetNillableName(s *string) *TheaterUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetCover sets the "cover" field.
func (tu *TheaterUpdate) SetCover(s string) *TheaterUpdate {
	tu.mutation.SetCover(s)
	return tu
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (tu *TheaterUpdate) SetNillableCover(s *string) *TheaterUpdate {
	if s != nil {
		tu.SetCover(*s)
	}
	return tu
}

// SetReleasedAt sets the "released_at" field.
func (tu *TheaterUpdate) SetReleasedAt(t time.Time) *TheaterUpdate {
	tu.mutation.SetReleasedAt(t)
	return tu
}

// SetNillableReleasedAt sets the "released_at" field if the given value is not nil.
func (tu *TheaterUpdate) SetNillableReleasedAt(t *time.Time) *TheaterUpdate {
	if t != nil {
		tu.SetReleasedAt(*t)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TheaterUpdate) SetDescription(s string) *TheaterUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TheaterUpdate) SetNillableDescription(s *string) *TheaterUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TheaterUpdate) SetStatus(i int) *TheaterUpdate {
	tu.mutation.ResetStatus()
	tu.mutation.SetStatus(i)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TheaterUpdate) SetNillableStatus(i *int) *TheaterUpdate {
	if i != nil {
		tu.SetStatus(*i)
	}
	return tu
}

// AddStatus adds i to the "status" field.
func (tu *TheaterUpdate) AddStatus(i int) *TheaterUpdate {
	tu.mutation.AddStatus(i)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TheaterUpdate) SetCreatedAt(t time.Time) *TheaterUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TheaterUpdate) SetNillableCreatedAt(t *time.Time) *TheaterUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetAnimeID sets the "anime" edge to the Anime entity by ID.
func (tu *TheaterUpdate) SetAnimeID(id int) *TheaterUpdate {
	tu.mutation.SetAnimeID(id)
	return tu
}

// SetNillableAnimeID sets the "anime" edge to the Anime entity by ID if the given value is not nil.
func (tu *TheaterUpdate) SetNillableAnimeID(id *int) *TheaterUpdate {
	if id != nil {
		tu = tu.SetAnimeID(*id)
	}
	return tu
}

// SetAnime sets the "anime" edge to the Anime entity.
func (tu *TheaterUpdate) SetAnime(a *Anime) *TheaterUpdate {
	return tu.SetAnimeID(a.ID)
}

// Mutation returns the TheaterMutation object of the builder.
func (tu *TheaterUpdate) Mutation() *TheaterMutation {
	return tu.mutation
}

// ClearAnime clears the "anime" edge to the Anime entity.
func (tu *TheaterUpdate) ClearAnime() *TheaterUpdate {
	tu.mutation.ClearAnime()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TheaterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TheaterUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TheaterUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TheaterUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TheaterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(theater.Table, theater.Columns, sqlgraph.NewFieldSpec(theater.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(theater.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Cover(); ok {
		_spec.SetField(theater.FieldCover, field.TypeString, value)
	}
	if value, ok := tu.mutation.ReleasedAt(); ok {
		_spec.SetField(theater.FieldReleasedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(theater.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(theater.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedStatus(); ok {
		_spec.AddField(theater.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(theater.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.AnimeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theater.AnimeTable,
			Columns: []string{theater.AnimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anime.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AnimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theater.AnimeTable,
			Columns: []string{theater.AnimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anime.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{theater.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TheaterUpdateOne is the builder for updating a single Theater entity.
type TheaterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TheaterMutation
}

// SetName sets the "name" field.
func (tuo *TheaterUpdateOne) SetName(s string) *TheaterUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TheaterUpdateOne) SetNillableName(s *string) *TheaterUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetCover sets the "cover" field.
func (tuo *TheaterUpdateOne) SetCover(s string) *TheaterUpdateOne {
	tuo.mutation.SetCover(s)
	return tuo
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (tuo *TheaterUpdateOne) SetNillableCover(s *string) *TheaterUpdateOne {
	if s != nil {
		tuo.SetCover(*s)
	}
	return tuo
}

// SetReleasedAt sets the "released_at" field.
func (tuo *TheaterUpdateOne) SetReleasedAt(t time.Time) *TheaterUpdateOne {
	tuo.mutation.SetReleasedAt(t)
	return tuo
}

// SetNillableReleasedAt sets the "released_at" field if the given value is not nil.
func (tuo *TheaterUpdateOne) SetNillableReleasedAt(t *time.Time) *TheaterUpdateOne {
	if t != nil {
		tuo.SetReleasedAt(*t)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TheaterUpdateOne) SetDescription(s string) *TheaterUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TheaterUpdateOne) SetNillableDescription(s *string) *TheaterUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TheaterUpdateOne) SetStatus(i int) *TheaterUpdateOne {
	tuo.mutation.ResetStatus()
	tuo.mutation.SetStatus(i)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TheaterUpdateOne) SetNillableStatus(i *int) *TheaterUpdateOne {
	if i != nil {
		tuo.SetStatus(*i)
	}
	return tuo
}

// AddStatus adds i to the "status" field.
func (tuo *TheaterUpdateOne) AddStatus(i int) *TheaterUpdateOne {
	tuo.mutation.AddStatus(i)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TheaterUpdateOne) SetCreatedAt(t time.Time) *TheaterUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TheaterUpdateOne) SetNillableCreatedAt(t *time.Time) *TheaterUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetAnimeID sets the "anime" edge to the Anime entity by ID.
func (tuo *TheaterUpdateOne) SetAnimeID(id int) *TheaterUpdateOne {
	tuo.mutation.SetAnimeID(id)
	return tuo
}

// SetNillableAnimeID sets the "anime" edge to the Anime entity by ID if the given value is not nil.
func (tuo *TheaterUpdateOne) SetNillableAnimeID(id *int) *TheaterUpdateOne {
	if id != nil {
		tuo = tuo.SetAnimeID(*id)
	}
	return tuo
}

// SetAnime sets the "anime" edge to the Anime entity.
func (tuo *TheaterUpdateOne) SetAnime(a *Anime) *TheaterUpdateOne {
	return tuo.SetAnimeID(a.ID)
}

// Mutation returns the TheaterMutation object of the builder.
func (tuo *TheaterUpdateOne) Mutation() *TheaterMutation {
	return tuo.mutation
}

// ClearAnime clears the "anime" edge to the Anime entity.
func (tuo *TheaterUpdateOne) ClearAnime() *TheaterUpdateOne {
	tuo.mutation.ClearAnime()
	return tuo
}

// Where appends a list predicates to the TheaterUpdate builder.
func (tuo *TheaterUpdateOne) Where(ps ...predicate.Theater) *TheaterUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TheaterUpdateOne) Select(field string, fields ...string) *TheaterUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Theater entity.
func (tuo *TheaterUpdateOne) Save(ctx context.Context) (*Theater, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TheaterUpdateOne) SaveX(ctx context.Context) *Theater {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TheaterUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TheaterUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TheaterUpdateOne) sqlSave(ctx context.Context) (_node *Theater, err error) {
	_spec := sqlgraph.NewUpdateSpec(theater.Table, theater.Columns, sqlgraph.NewFieldSpec(theater.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Theater.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, theater.FieldID)
		for _, f := range fields {
			if !theater.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != theater.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(theater.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Cover(); ok {
		_spec.SetField(theater.FieldCover, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ReleasedAt(); ok {
		_spec.SetField(theater.FieldReleasedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(theater.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(theater.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedStatus(); ok {
		_spec.AddField(theater.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(theater.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.AnimeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theater.AnimeTable,
			Columns: []string{theater.AnimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anime.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AnimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   theater.AnimeTable,
			Columns: []string{theater.AnimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anime.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Theater{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{theater.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
