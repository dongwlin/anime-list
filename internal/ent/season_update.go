// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dongwlin/anime-list/internal/ent/anime"
	"github.com/dongwlin/anime-list/internal/ent/episode"
	"github.com/dongwlin/anime-list/internal/ent/predicate"
	"github.com/dongwlin/anime-list/internal/ent/season"
)

// SeasonUpdate is the builder for updating Season entities.
type SeasonUpdate struct {
	config
	hooks    []Hook
	mutation *SeasonMutation
}

// Where appends a list predicates to the SeasonUpdate builder.
func (su *SeasonUpdate) Where(ps ...predicate.Season) *SeasonUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SeasonUpdate) SetName(s string) *SeasonUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableName(s *string) *SeasonUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetValue sets the "value" field.
func (su *SeasonUpdate) SetValue(i int64) *SeasonUpdate {
	su.mutation.ResetValue()
	su.mutation.SetValue(i)
	return su
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableValue(i *int64) *SeasonUpdate {
	if i != nil {
		su.SetValue(*i)
	}
	return su
}

// AddValue adds i to the "value" field.
func (su *SeasonUpdate) AddValue(i int64) *SeasonUpdate {
	su.mutation.AddValue(i)
	return su
}

// SetCover sets the "cover" field.
func (su *SeasonUpdate) SetCover(s string) *SeasonUpdate {
	su.mutation.SetCover(s)
	return su
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableCover(s *string) *SeasonUpdate {
	if s != nil {
		su.SetCover(*s)
	}
	return su
}

// SetReleasedAt sets the "released_at" field.
func (su *SeasonUpdate) SetReleasedAt(t time.Time) *SeasonUpdate {
	su.mutation.SetReleasedAt(t)
	return su
}

// SetNillableReleasedAt sets the "released_at" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableReleasedAt(t *time.Time) *SeasonUpdate {
	if t != nil {
		su.SetReleasedAt(*t)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SeasonUpdate) SetDescription(s string) *SeasonUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableDescription(s *string) *SeasonUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// SetStatus sets the "status" field.
func (su *SeasonUpdate) SetStatus(i int) *SeasonUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(i)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableStatus(i *int) *SeasonUpdate {
	if i != nil {
		su.SetStatus(*i)
	}
	return su
}

// AddStatus adds i to the "status" field.
func (su *SeasonUpdate) AddStatus(i int) *SeasonUpdate {
	su.mutation.AddStatus(i)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SeasonUpdate) SetCreatedAt(t time.Time) *SeasonUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SeasonUpdate) SetNillableCreatedAt(t *time.Time) *SeasonUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (su *SeasonUpdate) AddEpisodeIDs(ids ...int) *SeasonUpdate {
	su.mutation.AddEpisodeIDs(ids...)
	return su
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (su *SeasonUpdate) AddEpisodes(e ...*Episode) *SeasonUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddEpisodeIDs(ids...)
}

// SetAnimeID sets the "anime" edge to the Anime entity by ID.
func (su *SeasonUpdate) SetAnimeID(id int) *SeasonUpdate {
	su.mutation.SetAnimeID(id)
	return su
}

// SetNillableAnimeID sets the "anime" edge to the Anime entity by ID if the given value is not nil.
func (su *SeasonUpdate) SetNillableAnimeID(id *int) *SeasonUpdate {
	if id != nil {
		su = su.SetAnimeID(*id)
	}
	return su
}

// SetAnime sets the "anime" edge to the Anime entity.
func (su *SeasonUpdate) SetAnime(a *Anime) *SeasonUpdate {
	return su.SetAnimeID(a.ID)
}

// Mutation returns the SeasonMutation object of the builder.
func (su *SeasonUpdate) Mutation() *SeasonMutation {
	return su.mutation
}

// ClearEpisodes clears all "episodes" edges to the Episode entity.
func (su *SeasonUpdate) ClearEpisodes() *SeasonUpdate {
	su.mutation.ClearEpisodes()
	return su
}

// RemoveEpisodeIDs removes the "episodes" edge to Episode entities by IDs.
func (su *SeasonUpdate) RemoveEpisodeIDs(ids ...int) *SeasonUpdate {
	su.mutation.RemoveEpisodeIDs(ids...)
	return su
}

// RemoveEpisodes removes "episodes" edges to Episode entities.
func (su *SeasonUpdate) RemoveEpisodes(e ...*Episode) *SeasonUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveEpisodeIDs(ids...)
}

// ClearAnime clears the "anime" edge to the Anime entity.
func (su *SeasonUpdate) ClearAnime() *SeasonUpdate {
	su.mutation.ClearAnime()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SeasonUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SeasonUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SeasonUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SeasonUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SeasonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(season.Table, season.Columns, sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(season.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Value(); ok {
		_spec.SetField(season.FieldValue, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedValue(); ok {
		_spec.AddField(season.FieldValue, field.TypeInt64, value)
	}
	if value, ok := su.mutation.Cover(); ok {
		_spec.SetField(season.FieldCover, field.TypeString, value)
	}
	if value, ok := su.mutation.ReleasedAt(); ok {
		_spec.SetField(season.FieldReleasedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(season.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(season.FieldStatus, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(season.FieldStatus, field.TypeInt, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(season.FieldCreatedAt, field.TypeTime, value)
	}
	if su.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedEpisodesIDs(); len(nodes) > 0 && !su.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AnimeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   season.AnimeTable,
			Columns: []string{season.AnimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anime.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AnimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   season.AnimeTable,
			Columns: []string{season.AnimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anime.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{season.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SeasonUpdateOne is the builder for updating a single Season entity.
type SeasonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeasonMutation
}

// SetName sets the "name" field.
func (suo *SeasonUpdateOne) SetName(s string) *SeasonUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableName(s *string) *SeasonUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetValue sets the "value" field.
func (suo *SeasonUpdateOne) SetValue(i int64) *SeasonUpdateOne {
	suo.mutation.ResetValue()
	suo.mutation.SetValue(i)
	return suo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableValue(i *int64) *SeasonUpdateOne {
	if i != nil {
		suo.SetValue(*i)
	}
	return suo
}

// AddValue adds i to the "value" field.
func (suo *SeasonUpdateOne) AddValue(i int64) *SeasonUpdateOne {
	suo.mutation.AddValue(i)
	return suo
}

// SetCover sets the "cover" field.
func (suo *SeasonUpdateOne) SetCover(s string) *SeasonUpdateOne {
	suo.mutation.SetCover(s)
	return suo
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableCover(s *string) *SeasonUpdateOne {
	if s != nil {
		suo.SetCover(*s)
	}
	return suo
}

// SetReleasedAt sets the "released_at" field.
func (suo *SeasonUpdateOne) SetReleasedAt(t time.Time) *SeasonUpdateOne {
	suo.mutation.SetReleasedAt(t)
	return suo
}

// SetNillableReleasedAt sets the "released_at" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableReleasedAt(t *time.Time) *SeasonUpdateOne {
	if t != nil {
		suo.SetReleasedAt(*t)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SeasonUpdateOne) SetDescription(s string) *SeasonUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableDescription(s *string) *SeasonUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// SetStatus sets the "status" field.
func (suo *SeasonUpdateOne) SetStatus(i int) *SeasonUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(i)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableStatus(i *int) *SeasonUpdateOne {
	if i != nil {
		suo.SetStatus(*i)
	}
	return suo
}

// AddStatus adds i to the "status" field.
func (suo *SeasonUpdateOne) AddStatus(i int) *SeasonUpdateOne {
	suo.mutation.AddStatus(i)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SeasonUpdateOne) SetCreatedAt(t time.Time) *SeasonUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableCreatedAt(t *time.Time) *SeasonUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (suo *SeasonUpdateOne) AddEpisodeIDs(ids ...int) *SeasonUpdateOne {
	suo.mutation.AddEpisodeIDs(ids...)
	return suo
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (suo *SeasonUpdateOne) AddEpisodes(e ...*Episode) *SeasonUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddEpisodeIDs(ids...)
}

// SetAnimeID sets the "anime" edge to the Anime entity by ID.
func (suo *SeasonUpdateOne) SetAnimeID(id int) *SeasonUpdateOne {
	suo.mutation.SetAnimeID(id)
	return suo
}

// SetNillableAnimeID sets the "anime" edge to the Anime entity by ID if the given value is not nil.
func (suo *SeasonUpdateOne) SetNillableAnimeID(id *int) *SeasonUpdateOne {
	if id != nil {
		suo = suo.SetAnimeID(*id)
	}
	return suo
}

// SetAnime sets the "anime" edge to the Anime entity.
func (suo *SeasonUpdateOne) SetAnime(a *Anime) *SeasonUpdateOne {
	return suo.SetAnimeID(a.ID)
}

// Mutation returns the SeasonMutation object of the builder.
func (suo *SeasonUpdateOne) Mutation() *SeasonMutation {
	return suo.mutation
}

// ClearEpisodes clears all "episodes" edges to the Episode entity.
func (suo *SeasonUpdateOne) ClearEpisodes() *SeasonUpdateOne {
	suo.mutation.ClearEpisodes()
	return suo
}

// RemoveEpisodeIDs removes the "episodes" edge to Episode entities by IDs.
func (suo *SeasonUpdateOne) RemoveEpisodeIDs(ids ...int) *SeasonUpdateOne {
	suo.mutation.RemoveEpisodeIDs(ids...)
	return suo
}

// RemoveEpisodes removes "episodes" edges to Episode entities.
func (suo *SeasonUpdateOne) RemoveEpisodes(e ...*Episode) *SeasonUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveEpisodeIDs(ids...)
}

// ClearAnime clears the "anime" edge to the Anime entity.
func (suo *SeasonUpdateOne) ClearAnime() *SeasonUpdateOne {
	suo.mutation.ClearAnime()
	return suo
}

// Where appends a list predicates to the SeasonUpdate builder.
func (suo *SeasonUpdateOne) Where(ps ...predicate.Season) *SeasonUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SeasonUpdateOne) Select(field string, fields ...string) *SeasonUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Season entity.
func (suo *SeasonUpdateOne) Save(ctx context.Context) (*Season, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SeasonUpdateOne) SaveX(ctx context.Context) *Season {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SeasonUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SeasonUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SeasonUpdateOne) sqlSave(ctx context.Context) (_node *Season, err error) {
	_spec := sqlgraph.NewUpdateSpec(season.Table, season.Columns, sqlgraph.NewFieldSpec(season.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Season.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, season.FieldID)
		for _, f := range fields {
			if !season.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != season.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(season.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Value(); ok {
		_spec.SetField(season.FieldValue, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedValue(); ok {
		_spec.AddField(season.FieldValue, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.Cover(); ok {
		_spec.SetField(season.FieldCover, field.TypeString, value)
	}
	if value, ok := suo.mutation.ReleasedAt(); ok {
		_spec.SetField(season.FieldReleasedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(season.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(season.FieldStatus, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(season.FieldStatus, field.TypeInt, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(season.FieldCreatedAt, field.TypeTime, value)
	}
	if suo.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedEpisodesIDs(); len(nodes) > 0 && !suo.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   season.EpisodesTable,
			Columns: []string{season.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AnimeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   season.AnimeTable,
			Columns: []string{season.AnimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anime.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AnimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   season.AnimeTable,
			Columns: []string{season.AnimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(anime.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Season{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{season.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
