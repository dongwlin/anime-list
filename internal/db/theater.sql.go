// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: theater.sql

package db

import (
	"context"
	"time"
)

const createTheater = `-- name: CreateTheater :one
INSERT INTO theaters (
    anime_id,
    name,
    cover,
    released_at,
    desc,
    status
) VALUES (
    ?, ?, ?, ?, ?, ?
)
RETURNING id, anime_id, name, cover, released_at, "desc", status, created_at, updated_at
`

type CreateTheaterParams struct {
	AnimeID    int64     `json:"anime_id"`
	Name       string    `json:"name"`
	Cover      string    `json:"cover"`
	ReleasedAt time.Time `json:"released_at"`
	Desc       string    `json:"desc"`
	Status     int64     `json:"status"`
}

func (q *Queries) CreateTheater(ctx context.Context, arg CreateTheaterParams) (Theater, error) {
	row := q.db.QueryRowContext(ctx, createTheater,
		arg.AnimeID,
		arg.Name,
		arg.Cover,
		arg.ReleasedAt,
		arg.Desc,
		arg.Status,
	)
	var i Theater
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.Name,
		&i.Cover,
		&i.ReleasedAt,
		&i.Desc,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTheater = `-- name: DeleteTheater :exec
DELETE FROM theaters
WHERE id = ?
`

func (q *Queries) DeleteTheater(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTheater, id)
	return err
}

const getTheater = `-- name: GetTheater :one
SELECT id, anime_id, name, cover, released_at, "desc", status, created_at, updated_at FROM theaters
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetTheater(ctx context.Context, id int64) (Theater, error) {
	row := q.db.QueryRowContext(ctx, getTheater, id)
	var i Theater
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.Name,
		&i.Cover,
		&i.ReleasedAt,
		&i.Desc,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTheater = `-- name: ListTheater :many
SELECT id, anime_id, name, cover, released_at, "desc", status, created_at, updated_at FROM theaters
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListTheaterParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListTheater(ctx context.Context, arg ListTheaterParams) ([]Theater, error) {
	rows, err := q.db.QueryContext(ctx, listTheater, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Theater{}
	for rows.Next() {
		var i Theater
		if err := rows.Scan(
			&i.ID,
			&i.AnimeID,
			&i.Name,
			&i.Cover,
			&i.ReleasedAt,
			&i.Desc,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTheater = `-- name: UpdateTheater :one
UPDATE theaters
SET name = ?, cover = ?, released_at = ?, desc = ?, status = ?, updated_at = strftime('%Y-%m-%d %H:%M:%f', 'now', 'localtime')
WHERE id = ?
RETURNING id, anime_id, name, cover, released_at, "desc", status, created_at, updated_at
`

type UpdateTheaterParams struct {
	Name       string    `json:"name"`
	Cover      string    `json:"cover"`
	ReleasedAt time.Time `json:"released_at"`
	Desc       string    `json:"desc"`
	Status     int64     `json:"status"`
	ID         int64     `json:"id"`
}

func (q *Queries) UpdateTheater(ctx context.Context, arg UpdateTheaterParams) (Theater, error) {
	row := q.db.QueryRowContext(ctx, updateTheater,
		arg.Name,
		arg.Cover,
		arg.ReleasedAt,
		arg.Desc,
		arg.Status,
		arg.ID,
	)
	var i Theater
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.Name,
		&i.Cover,
		&i.ReleasedAt,
		&i.Desc,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
