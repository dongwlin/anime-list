// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: season.sql

package sqlc

import (
	"context"
	"time"
)

const countSeason = `-- name: CountSeason :one
SELECT COUNT(*) as total
FROM seasons
WHERE anime_id = ?
`

func (q *Queries) CountSeason(ctx context.Context, animeID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSeason, animeID)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const createSeason = `-- name: CreateSeason :one
INSERT INTO seasons (
    anime_id,
    name,
    value,
    cover,
    released_at,
    description,
    status
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, anime_id, name, value, cover, released_at, description, status, created_at, updated_at
`

type CreateSeasonParams struct {
	AnimeID     int64     `json:"anime_id"`
	Name        string    `json:"name"`
	Value       int64     `json:"value"`
	Cover       string    `json:"cover"`
	ReleasedAt  time.Time `json:"released_at"`
	Description string    `json:"description"`
	Status      int64     `json:"status"`
}

func (q *Queries) CreateSeason(ctx context.Context, arg CreateSeasonParams) (Season, error) {
	row := q.db.QueryRowContext(ctx, createSeason,
		arg.AnimeID,
		arg.Name,
		arg.Value,
		arg.Cover,
		arg.ReleasedAt,
		arg.Description,
		arg.Status,
	)
	var i Season
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.Name,
		&i.Value,
		&i.Cover,
		&i.ReleasedAt,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSeason = `-- name: DeleteSeason :exec
DELETE FROM seasons
WHERE id = ?
`

func (q *Queries) DeleteSeason(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSeason, id)
	return err
}

const getSeason = `-- name: GetSeason :one
SELECT id, anime_id, name, value, cover, released_at, description, status, created_at, updated_at FROM seasons
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetSeason(ctx context.Context, id int64) (Season, error) {
	row := q.db.QueryRowContext(ctx, getSeason, id)
	var i Season
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.Name,
		&i.Value,
		&i.Cover,
		&i.ReleasedAt,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSeason = `-- name: ListSeason :many
SELECT id, anime_id, name, value, cover, released_at, description, status, created_at, updated_at FROM seasons
WHERE anime_id = ?
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListSeasonParams struct {
	AnimeID int64 `json:"anime_id"`
	Limit   int64 `json:"limit"`
	Offset  int64 `json:"offset"`
}

func (q *Queries) ListSeason(ctx context.Context, arg ListSeasonParams) ([]Season, error) {
	rows, err := q.db.QueryContext(ctx, listSeason, arg.AnimeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Season{}
	for rows.Next() {
		var i Season
		if err := rows.Scan(
			&i.ID,
			&i.AnimeID,
			&i.Name,
			&i.Value,
			&i.Cover,
			&i.ReleasedAt,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSeason = `-- name: UpdateSeason :one
UPDATE seasons
SET name = ?, value = ?, cover = ?, released_at = ?, description = ?, status = ?, updated_at = strftime('%Y-%m-%d %H:%M:%f', 'now', 'localtime')
WHERE id = ?
RETURNING id, anime_id, name, value, cover, released_at, description, status, created_at, updated_at
`

type UpdateSeasonParams struct {
	Name        string    `json:"name"`
	Value       int64     `json:"value"`
	Cover       string    `json:"cover"`
	ReleasedAt  time.Time `json:"released_at"`
	Description string    `json:"description"`
	Status      int64     `json:"status"`
	ID          int64     `json:"id"`
}

func (q *Queries) UpdateSeason(ctx context.Context, arg UpdateSeasonParams) (Season, error) {
	row := q.db.QueryRowContext(ctx, updateSeason,
		arg.Name,
		arg.Value,
		arg.Cover,
		arg.ReleasedAt,
		arg.Description,
		arg.Status,
		arg.ID,
	)
	var i Season
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.Name,
		&i.Value,
		&i.Cover,
		&i.ReleasedAt,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
